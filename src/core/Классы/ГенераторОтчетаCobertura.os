Перем ТекущаяЗаписьXML;
Перем ДатаГенерации;
Перем ПутьКИсходникам;
Перем ТаблицаСтатистикиПокрытия;
Перем ТаблицаПакетов;
Перем ТаблицаДанныхПоКлассам;
Перем ТаблицаДанныхПоМетодамКлассов;

// Выполняет формирование отчета
//
// Параметры:
//   ВходящаяТаблицаСтатистикиПокрытия - ТаблицаЗначений - Прочитанные данные статистики OScript
//   ПутьКОтчету - Строка - Путь к файлу отчета
//
Процедура Сформировать(Знач ВходящаяТаблицаСтатистикиПокрытия, Знач ПутьКОтчету) Экспорт

	ТаблицаСтатистикиПокрытия = ВходящаяТаблицаСтатистикиПокрытия;

	ТекущаяЗаписьXML = Новый ЗаписьXML;
	ТекущаяЗаписьXML.ОткрытьФайл(ПутьКОтчету);
	ТекущаяЗаписьXML.ЗаписатьОбъявлениеXML();

	ДатаГенерации = ДатуВTimestamp(ТекущаяДата());

	ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("coverage");
	ТекущаяЗаписьXML.ЗаписатьАтрибут("version", "1.0");
	ТекущаяЗаписьXML.ЗаписатьАтрибут("timestamp", ДатаГенерации);
	ТекущаяЗаписьXML.ЗаписатьАтрибут("complexity", "");
	ТекущаяЗаписьXML.ЗаписатьАтрибут("branches-covered", "");
	ТекущаяЗаписьXML.ЗаписатьАтрибут("branches-valid", "");
	ТекущаяЗаписьXML.ЗаписатьАтрибут("branch-rate", "");

	ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("sources");

	ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("source");
	ТекущаяЗаписьXML.ЗаписатьТекст(ПутьКИсходникам);

	ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // source

	ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // sources

	ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("packages");

	ТаблицаПакетов = ТаблицаСтатистикиПокрытия.Скопировать();
	ТаблицаПакетов.Свернуть("Пакет", "Покрыто, НеПокрыто");

	РассчитатьПроцентПокрытияПоТаблице(ТаблицаПакетов, "Пакет");

	ТаблицаДанныхПоКлассам = ТаблицаСтатистикиПокрытия.Скопировать();
	ТаблицаДанныхПоКлассам.Свернуть("Пакет, ПутьКФайлу, ИмяКласса", "Покрыто, НеПокрыто");
	
	РассчитатьПроцентПокрытияПоТаблице(ТаблицаДанныхПоКлассам, "Пакет, ПутьКФайлу, ИмяКласса");

	ТаблицаДанныхПоМетодамКлассов = ТаблицаСтатистикиПокрытия.Скопировать();
	ТаблицаДанныхПоМетодамКлассов.Свернуть("Пакет, ПутьКФайлу, ИмяКласса, ИмяМетода", "Покрыто, НеПокрыто");
	
	РассчитатьПроцентПокрытияПоТаблице(ТаблицаДанныхПоМетодамКлассов, "Пакет, ПутьКФайлу, ИмяКласса, ИмяМетода");

	ЗаписатьДанныеПакетов();

	ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // packages

	ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // coverage

	ТекущаяЗаписьXML.Закрыть();

КонецПроцедуры

Процедура РассчитатьПроцентПокрытияПоТаблице(ТаблицаРасчета, Знач НаборРазрезовРасчета)

	ТаблицаРасчета.Колонки.Добавить("ПроцентПокрытияСтрок");
	// ПроцентПокрытияСтрок = (СтрокаПакета.Покрыто / (СтрокаПакета.Покрыто + СтрокаПакета.НеПокрыто))*100;
	// TODO: Реализовать расчет процентов	
КонецПроцедуры


Процедура ЗаписатьДанныеПакетов()

	Для каждого СтрокаПакета Из ТаблицаПакетов Цикл
		
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("package");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("name", СтрокаПакета.Пакет);
		ТекущаяЗаписьXML.ЗаписатьАтрибут("complexity", "");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("branch-rate", "");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("line-rate", Строка(СтрокаПакета.ПроцентПокрытияСтрок));
		
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("classes");

		ЗаписатьДанныеКлассов(СтрокаПакета.Пакет);

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // classes
		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // package

	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьДанныеКлассов(ИмяПакета)
	
	Отбор = Новый Структура("Пакет", ИмяПакета);
	МассивСтрок = ТаблицаДанныхПоКлассам.НайтиСтроки(Отбор);

	Для каждого СтрокаКласса Из МассивСтрок Цикл
	
		// ПроцентПокрытияСтрок = (СтрокаПакета.Покрыто / (СтрокаПакета.Покрыто + СтрокаПакета.НеПокрыто))*100;
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("class");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("name", СтрокаКласса.ИмяКласса);
		ТекущаяЗаписьXML.ЗаписатьАтрибут("filename", СтрокаКласса.ПутьКФайлу);
		ТекущаяЗаписьXML.ЗаписатьАтрибут("complexity", "");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("branch-rate", "");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("line-rate", Строка(СтрокаКласса.ПроцентПокрытияСтрок));
		
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("methods");

		ЗаписатьДанныеМетодов(СтрокаКласса.Пакет, СтрокаКласса.ИмяКласса);

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // methods

		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("lines");

		ЗаписатьДанныеСтрок(СтрокаКласса.Пакет, СтрокаКласса.ИмяКласса);

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // lines

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // class

	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьДанныеМетодов(Знач ИмяПакета, Знач ИмяКласса)
	
	Отбор = Новый Структура("Пакет, ИмяКласса", ИмяПакета, ИмяКласса);
	МассивСтрок = ТаблицаДанныхПоМетодамКлассов.НайтиСтроки(Отбор);

	Для каждого СтрокаМетода Из МассивСтрок Цикл
		
		Если СтрокаМетода.ИмяМетода = "$entry" Тогда
			Продолжить;
		КонецЕсли;
		// ПроцентПокрытияСтрок = (СтрокаПакета.Покрыто / (СтрокаПакета.Покрыто + СтрокаПакета.НеПокрыто))*100;
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("method");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("name", СтрокаМетода.ИмяМетода);
		ТекущаяЗаписьXML.ЗаписатьАтрибут("filename", СтрокаМетода.ПутьКФайлу);
		ТекущаяЗаписьXML.ЗаписатьАтрибут("complexity", "");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("branch-rate", "");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("line-rate", Строка(СтрокаМетода.ПроцентПокрытияСтрок));
		
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("lines");

		ЗаписатьДанныеСтрок(СтрокаМетода.Пакет, СтрокаМетода.ИмяКласса, СтрокаМетода.ИмяМетода);

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // lines

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // method

	КонецЦикла;

КонецПроцедуры

Процедура ЗаписатьДанныеСтрок(Знач ИмяПакета, Знач ИмяКласса, Знач ИмяМетода = Неопределено)
	
	Отбор = Новый Структура("Пакет, ИмяКласса", ИмяПакета, ИмяКласса);
	
	Если ЗначениеЗаполнено(ИмяМетода) Тогда
		Отбор.Вставить("ИмяМетода", ИмяМетода);
	КонецЕсли;

	МассивСтрок = ТаблицаСтатистикиПокрытия.НайтиСтроки(Отбор);

	Для каждого СтрокаМодуля Из МассивСтрок Цикл
		
		ТекущаяЗаписьXML.ЗаписатьНачалоЭлемента("line");

		ТекущаяЗаписьXML.ЗаписатьАтрибут("number", СтрокаМодуля.СтрокаМодуля);
		ТекущаяЗаписьXML.ЗаписатьАтрибут("branch", "false");
		ТекущаяЗаписьXML.ЗаписатьАтрибут("condition-coverage", "100%");

		ТекущаяЗаписьXML.ЗаписатьАтрибут("hits", СтрокаМодуля.КоличествоВызовов);

		ТекущаяЗаписьXML.ЗаписатьКонецЭлемента(); // line

	КонецЦикла;

КонецПроцедуры

Процедура ПриСозданииОбъекта(Знач КаталогИсходников)
	ПутьКИсходникам = Новый Файл(КаталогИсходников).ПолноеИмя;
КонецПроцедуры

Функция ДатуВTimestamp(ВходящаяДата = Неопределено)
	Возврат Формат(Число( ?(ТипЗнч(ВходящаяДата) = Тип("Дата"), ВходящаяДата, ТекущаяДата())
					- Дата("19700101")), "ЧН=0; ЧГ=0");
КонецФункции